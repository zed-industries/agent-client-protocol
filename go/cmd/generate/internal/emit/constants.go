package emit

import (
	"bytes"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/zed-industries/agent-client-protocol/go/cmd/generate/internal/load"
	"github.com/zed-industries/agent-client-protocol/go/cmd/generate/internal/util"
)

// WriteConstantsJen writes the version and method constants to constants_gen.go.
func WriteConstantsJen(outDir string, meta *load.Meta) error {
	f := NewFile("acp")
	f.HeaderComment("Code generated by acp-go-generator; DO NOT EDIT.")
	f.Comment("ProtocolVersionNumber is the ACP protocol version supported by this SDK.")
	f.Const().Id("ProtocolVersionNumber").Op("=").Lit(meta.Version)

	// Agent methods
	amKeys := make([]string, 0, len(meta.AgentMethods))
	for k := range meta.AgentMethods {
		amKeys = append(amKeys, k)
	}
	sort.Strings(amKeys)
	var agentDefs []Code
	for _, k := range amKeys {
		wire := meta.AgentMethods[k]
		agentDefs = append(agentDefs, Id("AgentMethod"+toExportedConst(k)).Op("=").Lit(wire))
	}
	f.Comment("Agent method names")
	f.Const().Defs(agentDefs...)

	// Client methods
	cmKeys := make([]string, 0, len(meta.ClientMethods))
	for k := range meta.ClientMethods {
		cmKeys = append(cmKeys, k)
	}
	sort.Strings(cmKeys)
	var clientDefs []Code
	for _, k := range cmKeys {
		wire := meta.ClientMethods[k]
		clientDefs = append(clientDefs, Id("ClientMethod"+toExportedConst(k)).Op("=").Lit(wire))
	}
	f.Comment("Client method names")
	f.Const().Defs(clientDefs...)

	var buf bytes.Buffer
	if err := f.Render(&buf); err != nil {
		return err
	}
	return os.WriteFile(filepath.Join(outDir, "constants_gen.go"), buf.Bytes(), 0o644)
}

// Helpers kept private to this package (copy from original main)
func toExportedConst(s string) string {
	parts := strings.Split(s, "_")
	for i := range parts {
		parts[i] = util.TitleWord(parts[i])
	}
	return strings.Join(parts, "")
}
