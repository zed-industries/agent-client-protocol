// Code generated by acp-go-generator; DO NOT EDIT.

package acp

import (
	"context"
	"encoding/json"
)

func (a *AgentSideConnection) handle(ctx context.Context, method string, params json.RawMessage) (any, *RequestError) {
	switch method {
	case AgentMethodAuthenticate:
		var p AuthenticateRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		resp, err := a.agent.Authenticate(ctx, p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case AgentMethodInitialize:
		var p InitializeRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		resp, err := a.agent.Initialize(ctx, p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case AgentMethodModelSelect:
		var p SetSessionModelRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		exp, ok := a.agent.(AgentExperimental)
		if !ok {
			return nil, NewMethodNotFound(method)
		}
		resp, err := exp.SetSessionModel(ctx, p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case AgentMethodSessionCancel:
		var p CancelNotification
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		a.mu.Lock()
		if cn, ok := a.sessionCancels[string(p.SessionId)]; ok {
			cn()
			delete(a.sessionCancels, string(p.SessionId))
		}
		a.mu.Unlock()
		if err := a.agent.Cancel(ctx, p); err != nil {
			return nil, toReqErr(err)
		}
		return nil, nil
	case AgentMethodSessionLoad:
		var p LoadSessionRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		loader, ok := a.agent.(AgentLoader)
		if !ok {
			return nil, NewMethodNotFound(method)
		}
		resp, err := loader.LoadSession(ctx, p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case AgentMethodSessionNew:
		var p NewSessionRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		resp, err := a.agent.NewSession(ctx, p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case AgentMethodSessionPrompt:
		var p PromptRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		var reqCtx context.Context
		var cancel context.CancelFunc
		reqCtx, cancel = context.WithCancel(ctx)
		a.mu.Lock()
		if prev, ok := a.sessionCancels[string(p.SessionId)]; ok {
			prev()
		}
		a.sessionCancels[string(p.SessionId)] = cancel
		a.mu.Unlock()
		resp, err := a.agent.Prompt(reqCtx, p)
		a.mu.Lock()
		delete(a.sessionCancels, string(p.SessionId))
		a.mu.Unlock()
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case AgentMethodSessionSetMode:
		var p SetSessionModeRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		resp, err := a.agent.SetSessionMode(ctx, p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	default:
		return nil, NewMethodNotFound(method)
	}
}
func (c *AgentSideConnection) ReadTextFile(ctx context.Context, params ReadTextFileRequest) (ReadTextFileResponse, error) {
	resp, err := SendRequest[ReadTextFileResponse](c.conn, ctx, ClientMethodFsReadTextFile, params)
	return resp, err
}
func (c *AgentSideConnection) WriteTextFile(ctx context.Context, params WriteTextFileRequest) (WriteTextFileResponse, error) {
	resp, err := SendRequest[WriteTextFileResponse](c.conn, ctx, ClientMethodFsWriteTextFile, params)
	return resp, err
}
func (c *AgentSideConnection) RequestPermission(ctx context.Context, params RequestPermissionRequest) (RequestPermissionResponse, error) {
	resp, err := SendRequest[RequestPermissionResponse](c.conn, ctx, ClientMethodSessionRequestPermission, params)
	return resp, err
}
func (c *AgentSideConnection) SessionUpdate(ctx context.Context, params SessionNotification) error {
	return c.conn.SendNotification(ctx, ClientMethodSessionUpdate, params)
}
func (c *AgentSideConnection) CreateTerminal(ctx context.Context, params CreateTerminalRequest) (CreateTerminalResponse, error) {
	resp, err := SendRequest[CreateTerminalResponse](c.conn, ctx, ClientMethodTerminalCreate, params)
	return resp, err
}
func (c *AgentSideConnection) KillTerminalCommand(ctx context.Context, params KillTerminalCommandRequest) (KillTerminalCommandResponse, error) {
	resp, err := SendRequest[KillTerminalCommandResponse](c.conn, ctx, ClientMethodTerminalKill, params)
	return resp, err
}
func (c *AgentSideConnection) TerminalOutput(ctx context.Context, params TerminalOutputRequest) (TerminalOutputResponse, error) {
	resp, err := SendRequest[TerminalOutputResponse](c.conn, ctx, ClientMethodTerminalOutput, params)
	return resp, err
}
func (c *AgentSideConnection) ReleaseTerminal(ctx context.Context, params ReleaseTerminalRequest) (ReleaseTerminalResponse, error) {
	resp, err := SendRequest[ReleaseTerminalResponse](c.conn, ctx, ClientMethodTerminalRelease, params)
	return resp, err
}
func (c *AgentSideConnection) WaitForTerminalExit(ctx context.Context, params WaitForTerminalExitRequest) (WaitForTerminalExitResponse, error) {
	resp, err := SendRequest[WaitForTerminalExitResponse](c.conn, ctx, ClientMethodTerminalWaitForExit, params)
	return resp, err
}
