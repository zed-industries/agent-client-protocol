// Code generated by acp-go-generator; DO NOT EDIT.

package acp

import (
	"context"
	"encoding/json"
)

func (c *ClientSideConnection) handle(ctx context.Context, method string, params json.RawMessage) (any, *RequestError) {
	switch method {
	case ClientMethodFsReadTextFile:
		var p ReadTextFileRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		resp, err := c.client.ReadTextFile(ctx, p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case ClientMethodFsWriteTextFile:
		var p WriteTextFileRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		resp, err := c.client.WriteTextFile(ctx, p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case ClientMethodSessionRequestPermission:
		var p RequestPermissionRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		resp, err := c.client.RequestPermission(ctx, p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case ClientMethodSessionUpdate:
		var p SessionNotification
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := c.client.SessionUpdate(ctx, p); err != nil {
			return nil, toReqErr(err)
		}
		return nil, nil
	case ClientMethodTerminalCreate:
		var p CreateTerminalRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		resp, err := c.client.CreateTerminal(ctx, p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case ClientMethodTerminalKill:
		var p KillTerminalCommandRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		resp, err := c.client.KillTerminalCommand(ctx, p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case ClientMethodTerminalOutput:
		var p TerminalOutputRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		resp, err := c.client.TerminalOutput(ctx, p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case ClientMethodTerminalRelease:
		var p ReleaseTerminalRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		resp, err := c.client.ReleaseTerminal(ctx, p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case ClientMethodTerminalWaitForExit:
		var p WaitForTerminalExitRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		resp, err := c.client.WaitForTerminalExit(ctx, p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	default:
		return nil, NewMethodNotFound(method)
	}
}
func (c *ClientSideConnection) Authenticate(ctx context.Context, params AuthenticateRequest) (AuthenticateResponse, error) {
	resp, err := SendRequest[AuthenticateResponse](c.conn, ctx, AgentMethodAuthenticate, params)
	return resp, err
}
func (c *ClientSideConnection) Initialize(ctx context.Context, params InitializeRequest) (InitializeResponse, error) {
	resp, err := SendRequest[InitializeResponse](c.conn, ctx, AgentMethodInitialize, params)
	return resp, err
}
func (c *ClientSideConnection) SetSessionModel(ctx context.Context, params SetSessionModelRequest) (SetSessionModelResponse, error) {
	resp, err := SendRequest[SetSessionModelResponse](c.conn, ctx, AgentMethodModelSelect, params)
	return resp, err
}
func (c *ClientSideConnection) Cancel(ctx context.Context, params CancelNotification) error {
	return c.conn.SendNotification(ctx, AgentMethodSessionCancel, params)
}
func (c *ClientSideConnection) LoadSession(ctx context.Context, params LoadSessionRequest) (LoadSessionResponse, error) {
	resp, err := SendRequest[LoadSessionResponse](c.conn, ctx, AgentMethodSessionLoad, params)
	return resp, err
}
func (c *ClientSideConnection) NewSession(ctx context.Context, params NewSessionRequest) (NewSessionResponse, error) {
	resp, err := SendRequest[NewSessionResponse](c.conn, ctx, AgentMethodSessionNew, params)
	return resp, err
}
func (c *ClientSideConnection) Prompt(ctx context.Context, params PromptRequest) (PromptResponse, error) {
	resp, err := SendRequest[PromptResponse](c.conn, ctx, AgentMethodSessionPrompt, params)
	if err != nil {
		if ctx.Err() != nil {
			_ = c.Cancel(context.Background(), CancelNotification{SessionId: params.SessionId})
		}
	}
	return resp, err
}
func (c *ClientSideConnection) SetSessionMode(ctx context.Context, params SetSessionModeRequest) (SetSessionModeResponse, error) {
	resp, err := SendRequest[SetSessionModeResponse](c.conn, ctx, AgentMethodSessionSetMode, params)
	return resp, err
}
